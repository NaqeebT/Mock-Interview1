What is the "final" keyword usage and purpose?


The final keyword in Java is used to declare "entities" that cannot be changed.
It can be applied to variables, methods, and classes, each with its own specific implications.
Here's an overview of how the final keyword is used:

1. Final Variables:

When final is applied to a variable, it means that the variable's value cannot be changed after it is initialized.
It essentially makes the variable a constant.

Example:

public class MyClass {
    final int myConstant = 42;

    public static void main(String[] args) {
        MyClass obj = new MyClass();
        // obj.myConstant = 50; // This would result in a compilation error
        System.out.println(obj.myConstant);
    }
}

2. Final Methods:

When final is applied to a method, it means that the method cannot be overridden by subclasses.
This is commonly used to prevent modification of a method's behavior in subclasses.

Example:

class Parent {
    final void display() {
        System.out.println("This method cannot be overridden.");
    }
}

class Child extends Parent {
    // This would result in a compilation error
    // void display() {
    //     System.out.println("Trying to override the method.");
    // }
}

3. Final Classes:

When final is applied to a class, it means that the class cannot be subclassed.
This is useful when you want to prevent further extension of a class.

Example:

final class FinalClass {
    // Class members and methods
}

// This would result in a compilation error
// class Subclass extends FinalClass {
//     // Code for the subclass
// }


4. Final Parameters:

When final is applied to a method parameter, it means that the parameter cannot be modified within the method.
This is particularly useful in situations where you want to ensure that the parameter remains constant.

Example:

public class MyClass {
    void process(final int value) {
        // value = 50; // This would result in a compilation error
        System.out.println("Processing value: " + value);
    }

    public static void main(String[] args) {
        MyClass obj = new MyClass();
        obj.process(42);
    }
}


-------------------------------------------------------------------------------------------------------------------
Purposes of Using final:

1.Immutability:
To create immutable classes by making fields final so that their values cannot be changed after instantiation.

2. Security:
To prevent method or class modification, enhancing security by avoiding potential malicious modifications.

3. Performance:
The final keyword can provide hints to the compiler and JVM about optimizations, potentially improving performance.

4.API Design:
It helps in designing stable APIs by ensuring that certain elements are not modified in subclasses or implementations.

5. Constants:
To declare constants in a class by making variables final, ensuring their values remain constant.

Using the final keyword should be done judiciously, considering the specific requirements of the code.
It helps in making the code more robust, secure, and maintainable.





